{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","checkUrl","undefined","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","onBlur","NewMovie","onAdd","count","setCount","newMovie","setNewMovie","urlValidator","urlString","match","handleChange","e","target","prevMovie","onSubmit","preventDefault","trim","prev","disabled","App","moviesFromServer","movieList","setMovieList","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9eafa8be.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  checkUrl?: (urlString: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  checkUrl = undefined,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {((touched && value) && (checkUrl && !checkUrl(value))) && (<p className=\"help is-danger\">{`${label} incorrect URL`}</p>)}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\n\ninterface Props {\n  onAdd: (\n    movie: {\n      title: string,\n      description: string,\n      imgUrl: string,\n      imdbUrl: string,\n      imdbId: string,\n    }\n  ) => void\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  // const [title, setTitle] = useState('');\n  // const [description, setDescription] = useState('');\n  // const [imgUrl, setImgUrl] = useState('');\n  // const [imdbUrl, setimdbUrl] = useState('');\n  // const [imdbId, setImdbId] = useState('');\n\n  const urlValidator = (urlString: string): boolean => {\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    if (!urlString.match(pattern)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  function addMovie(event: React.FormEvent) {\n    event.preventDefault();\n\n    onAdd({\n      title: newMovie.title.trim(),\n      description: newMovie.description.trim(),\n      imgUrl: newMovie.imgUrl.trim(),\n      imdbUrl: newMovie.imdbUrl.trim(),\n      imdbId: newMovie.imdbId.trim(),\n    });\n\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n\n    setCount(prev => prev + 1);\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    setNewMovie((prevMovie) => ({ ...prevMovie, [name]: value }));\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={addMovie}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={e => handleChange(e)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        value={newMovie.description}\n        onChange={e => handleChange(e)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        value={newMovie.imgUrl}\n        onChange={e => handleChange(e)}\n        checkUrl={urlValidator}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        value={newMovie.imdbUrl}\n        onChange={e => handleChange(e)}\n        checkUrl={urlValidator}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        value={newMovie.imdbId}\n        onChange={e => handleChange(e)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!newMovie.title\n              || !urlValidator(newMovie.imgUrl)\n              || !urlValidator(newMovie.imdbUrl)\n              || !newMovie.imdbId}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movieList, setMovieList] = useState<Movie[]>([...moviesFromServer]);\n\n  const handleAddMovie = (newMovie: Movie) => {\n    setMovieList((prevMovies) => [...prevMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movieList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={handleAddMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}